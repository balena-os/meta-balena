#!/bin/sh
# Copyright 2023 Balena Ltd.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#    http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

# vi: ft=sh

# shellcheck disable=SC1091
[ -f "/usr/libexec/os-helpers-logging" ] && . /usr/libexec/os-helpers-logging

EFI_GLOBAL_VARIABLE_GUID="8be4df61-93ca-11d2-aa0d-00e098032b8c"

parse_efivar_val() {
	od --address-radix=n --format=u1 "$1" 2>/dev/null \
		| tr -s "' '" \
		| cut -d ' ' -f6
}

# return zero if secure boot is enabled
secureboot_enabled() {
	test "$(parse_efivar_val \
			/sys/firmware/efi/efivars/SecureBoot-${EFI_GLOBAL_VARIABLE_GUID})" -eq 1 \
			2>/dev/null
}

# return zero if system is in setup mode
setup_mode_enabled() {
	test "$(parse_efivar_val \
			/sys/firmware/efi/efivars/SetupMode-${EFI_GLOBAL_VARIABLE_GUID})" -eq 1 \
			2>/dev/null
}

# return zero if system is in user mode
user_mode_enabled() {
	secureboot_enabled && ! setup_mode_enabled
}

# return PK and KEK keys metadata as a json array
get_SB_keys() {
	tmp_dir="/tmp/efi_extract_$(openssl rand -hex 6)"
	mkdir -p "$tmp_dir"

		# Function to extract and process certificates
		extract_and_process() {
			local efi_var="$1"
			local efi_readvar_output="${tmp_dir}/${efi_var}"
			local certs_output_prefix="${efi_readvar_output}-certs"
			local json_entries=()

			# Read EFI variable and extract certificates
			efi-readvar -v "$efi_var" -o "$efi_readvar_output" > /dev/null 2>&1
			sig-list-to-certs "$efi_readvar_output" "$certs_output_prefix" > /dev/null 2>&1

			# Process all extracted certificates
			for cert_file in "${certs_output_prefix}"-*.der; do
					if [[ -f "$cert_file" ]]; then
							# Convert DER to PEM
							pem_file="${cert_file%.der}.pem"
							openssl x509 -inform der -in "$cert_file" -out "$pem_file" > /dev/null 2>&1

							# Extract certificate details
							issuer=$(openssl x509 -in "$pem_file" -noout -issuer | sed 's/issuer=//')
							subject=$(openssl x509 -in "$pem_file" -noout -subject | sed 's/subject=//')
							validity=$(openssl x509 -in "$pem_file" -noout -dates | tr '\n' ' ' | sed 's/ *$//')
							serial=$(openssl x509 -in "$pem_file" -noout -serial | sed 's/serial=//')
							sha256_fingerprint=$(openssl x509 -in "$pem_file" -noout -fingerprint -sha256 | cut -d'=' -f2 | tr -d ':')

							# Construct JSON object for this certificate
							json_entry="{\"type\":\"$efi_var\",\"issuer\":\"$issuer\",\"subject\":\"$subject\",\"validity\":\"$validity\",\"serial\":\"$serial\",\"sha256\":\"$sha256_fingerprint\"}"
							
							# Add JSON entry to the list
							json_entries+=("$json_entry")
					fi
			done

			# Join JSON entries into a valid JSON array and return
			echo "${json_entries[@]}" | jq -s .
	}

	pk_json=$(extract_and_process "PK")
	kek_json=$(extract_and_process "KEK")

	rm -rf "$tmp_dir"
	
	# Merge PK and KEK JSON arrays
	echo "$pk_json" "$kek_json" | jq -s 'add'
}