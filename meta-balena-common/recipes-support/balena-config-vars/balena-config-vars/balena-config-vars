#!/bin/sh

help () {
    cat << EOF
Script for setting balena shell environment
balena-config-vars [options]

Options:
    -h, --help
        Display this help and exit.

    -c, --config-path CONFIG_PATH
        Use a non default config.json file.
        Default: /mnt/boot/config.json
EOF
}

# Parse arguments
while [ "$#" -gt "0" ]; do
    key=$1
    case $key in
        -h|--help)
            help
            exit 0
            ;;
        -c|--config-path)
            CONFIG_PATH=$2
            shift
            ;;
        *)
            echo "[WARNING] $0 : Argument '$1' unknown. Ignoring."
            ;;
    esac
    shift
done

# Resin-boot mountpoint
BOOT_MOUNTPOINT="/mnt/boot"
FLASHER_FILEFLAG="$BOOT_MOUNTPOINT/balena-image-flasher"

# Default values
if [ -z "$CONFIG_PATH" ]; then
    if [ -f "$FLASHER_FILEFLAG" ]; then
        # Flasher stores a volatile file in tmpfs
        CONFIG_PATH=/mnt/boottmp/config.json
    else
        CONFIG_PATH=$BOOT_MOUNTPOINT/config.json
    fi
fi

BALENA_BOOT_MOUNTPOINT="/mnt/boot"

# If config.json provides redefinitions for our vars let us rewrite their
# runtime value
if [ -f $CONFIG_PATH ]; then
    CONFIG_PARAMS=$(jq -r '@sh "
         API_ENDPOINT=\(.apiEndpoint // "")
         APPLICATION_ID=\(.applicationId // "")
         BALENA_ROOT_CA=\(.balenaRootCA // "")
         CONFIG_HOSTNAME=\(.hostname // "")
         COUNTRY=\(.country // "")
         DELTA_ENDPOINT=\(.deltaEndpoint // "")
         DEVICE_API_KEY=\(.deviceApiKey // "")
         DEVICE_ID=\(.deviceId // "")
         DEVICE_TYPE=\(.deviceType // "")
         DNS_SERVERS=\(.dnsServers // "8.8.8.8")
         LISTEN_PORT=\(.listenPort // "")
         MIXPANEL_TOKEN=\(.mixpanelToken // "")
         NTP_SERVERS=\(.ntpServers // "")
         OS_NET_CONN_INTERVAL=\(.os.network.connectivity.interval // 3600)
         OS_NET_CONN_RESPONSE=\(.os.network.connectivity.response // "")
         OS_NET_CONN_URI=\(.os.network.connectivity.uri // "")
         OS_NET_WIFI_MACSCAN=\(.os.network.wifi.randomMacAddressScan)
         PERSISTENT_LOGGING=\(.persistentLogging // false)
         PROVISIONING_API_KEY=\(.apiKey // "")
         REGISTERED_AT=\(.registered_at // "")
         UUID=\(.uuid // "")
         "' $CONFIG_PATH)
    RESULT=$?
    if [ "$RESULT" = "4" ]; then
        echo "[ERROR] $0: Failed to parse '$CONFIG_PATH'."
        exit 1
    else
        eval "$CONFIG_PARAMS"
    fi

    # "null" is a valid setting in config.json that should write
    # an empty string for dns servers rather than the defaults
    if [ "$DNS_SERVERS" = "null" ]; then
        DNS_SERVERS=""
    fi

    # Set additional default values.
    if [ -z "$OS_NET_CONN_URI" ]; then
        if [ -n "$API_ENDPOINT" ]; then
            OS_NET_CONN_URI="$API_ENDPOINT/connectivity-check"
        fi
    fi
else
    echo "[WARNING] $0 : '$CONFIG_PATH' not found."
fi
