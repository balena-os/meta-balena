#!/bin/bash
#
# Script which burns an image from an external device to an internal device
# Assumptions:
#   * image is in boot partition of external device
#   * all needed variables are configured in resin-init-flasher.conf
#   * filesystems labeling scheme is persistent (flasher-*/resin-*)
# Variables in resin-init-flasher.conf
#  INTERNAL_DEVICE_KERNEL                 - internal device (enumerated by kernel) to be flashed
#                                             * it's impossible to known what dev to flash because
#                                               we don't have any labels before flashing something
#                                               so we need this info
#                                             * when multiple entries provided, the first block device
#                                               found will be used
#  INTERNAL_DEVICE_BOOTLOADER_CONFIG      - name of the bootloader config for internal media boot
#  INTERNAL_DEVICE_BOOTLOADER_CONFIG_PATH - relative path to internal boot partition where
#                                               INTERNAL_DEVICE_BOOTLOADER_CONFIG will be copied to
#  BALENA_IMAGE                            - image to be flashed on internal device
#                                             * this is defaulted to
#                                               balena-image-${MACHINE}.balenaos-img and should be
#                                               just fine
#  BOOTLOADER_FLASH_DEVICE                - device where bootloader binary will be flashed
#                                             * this variable should be set together with
#                                               BOOTLOADER_IMAGE
#                                             * if this variable is not set we DO NOT flash u-boot
#                                               to internal flash device
#  BOOTLOADER_IMAGE                       - name of the u-boot binary
#  BOOTLOADER_BLOCK_SIZE_OFFSET           - offset at which we write u-boot binary
#  BOOTLOADER_SKIP_OUTPUT_BLOCKS          - number of blocks to skip when writing bootloader
#                                             * this is the seek param to dd
#
#  Certain hardware requires that the bootloader is split into MLO and u-boot.img rather than having
# it all bundled in a u-boot.img binary. To address this requirement, this flashing script will further
# look for variables called BOOTLOADER_FLASH_DEVICE_1, BOOTLOADER_IMAGE_1, BOOTLOADER_BLOCK_SIZE_OFFSET_1,
# BOOTLOADER_SKIP_OUTPUT_BLOCKS_1 to be used in the same way as BOOTLOADER_FLASH_DEVICE, BOOTLOADER_IMAGE,
# BOOTLOADER_BLOCK_SIZE_OFFSET, BOOTLOADER_SKIP_OUTPUT_BLOCKS so that user can specify both MLO and u-boot
# to be written in the respective devices.

set -e

# Very long variables :)
EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT=/mnt/boot # mounted by systemd
INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT=/tmp/internal_boot
INTERNAL_DEVICE_CONF_PART_MOUNTPOINT=/tmp/internal_conf
FLASHER_CONF_FILE=/etc/resin-init-flasher.conf
SPLASH_DIRNAME=splash
BALENA_BOOTLOADER_CONFIG=resinOS_uEnv.txt
CURRENT_ROOT=$(findmnt --noheadings --canonicalize --output SOURCE / | xargs lsblk -no pkname)

function clean {
    echo "[resin-init-flasher] Cleanup."
    umount $INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT > /dev/null 2>&1 || true
    umount $INTERNAL_DEVICE_CONF_PART_MOUNTPOINT > /dev/null 2>&1 || true
}

function fail {
    echo "[resin-init-flasher] ERROR: $1"
    clean
    exit 1
}

function inform {
    echo "[resin-init-flasher] INFO: $1"
}

function find_part_id {
    DEVICE=$1
    PARTLABEL=$2

    lsblk -nlo "name,partlabel" | grep "${PARTLABEL}" | grep "${DEVICE}" | sed -e "s,^${DEVICE}p\?\([0-9][0-9]*\)[ \t]*${PARTLABEL}$,\1,"
}

function find_part_size {
    DEVICE=$1
    PARTID=$2

    parted "/dev/${DEVICE}" unit MiB print | grep "^[ \t]*${PARTID}[ \t][ \t]*" | awk '{print $4}' | sed -e "s,\(\.0\)\?MiB,,"
}

function find_part_start {
    DEVICE=$1
    PARTID=$2

    parted "/dev/${DEVICE}" unit MiB print | grep "^[ \t]*${PARTID}[ \t][ \t]*" | awk '{print $2}' | sed -e "s,\(\.0\)\?MiB,,"
}

########
# MAIN #
########

# Only root
if [ "$EUID" -ne 0 ]; then
    fail "Please run as root."
fi

inform "Board specific initialization..."
/usr/bin/resin-init-board

# Configuration file
if [ -f $FLASHER_CONF_FILE ]; then
    source $FLASHER_CONF_FILE
else
    fail "No configuration for resin-init-flasher."
fi
inform "resin-init-flasher configuration found."

# Balena configuration file
if [ -f /usr/sbin/balena-config-vars ]; then
    source /usr/sbin/balena-config-vars
else
    fail "No balena configuration found."
fi
inform "balena configuration found."

# CONFIG_PATH should exist
if [ ! -f "$CONFIG_PATH" ]; then
    fail "$CONFIG_PATH : No such file."
fi

# BALENA_BOOT_MOUNTPOINT should exit
if [ ! -d "$BALENA_BOOT_MOUNTPOINT" ]; then
	fail "$BALENA_BOOT_MOUNTPOINT : No such directory."
fi

# Give a chance to openvpn to come alive
STARTTIME=$(date +%s)
ENDTIME="$STARTTIME"
TIMEOUT=15
while [ "$(systemctl is-active openvpn)" != "active" ]
do
    if [ $((ENDTIME - STARTTIME)) -le $TIMEOUT ]; then
        sleep 1 && ENDTIME=$((ENDTIME + 1))
    else
        inform "Timeout while waiting for openvpn to come alive. No network?"
        break
    fi
done

# Flash Resin image on internal device
inform "Flash internal device... will take around 5 minutes... "
internal_dev=""
for d in $INTERNAL_DEVICE_KERNEL; do
    if [ "$CURRENT_ROOT" = "$d" ]; then
        inform "$d is our install media, skip it..."
        continue
    fi
    if fdisk -l | grep -q "$d"; then
        internal_dev=$d
        break
    fi
done
if [ -z "$internal_dev" ]; then
    resin-device-progress --percentage 100 --state "Failed to find any block devices." || true
    fail "Failed to find any block devices in $INTERNAL_DEVICE_KERNEL."
fi
inform "$internal_dev will be used for flashing."

if [ "$LUKS" = "1" ]; then
    # TODO: Hardcoded password now, randomize with TPM2
    PASSWORD="${LUKS_PASSWORD:-balenabeta}"
    LOOP_DEVICE=$(losetup --find --show --partscan "/opt/$BALENA_IMAGE")

    # Copy header and resin-boot partition
    inform "Flashing boot partition"
    dd if="/opt/$BALENA_IMAGE" of="/dev/$internal_dev" bs=4M count=11

    # Repartition the new drive - this assumes GPT partition table
    inform "Repartitioning $internal_dev for disk encryption"

    echo -e "OK\nFix" | parted ---pretend-input-tty "/dev/$internal_dev" print

    EFI_PART_ID=$(find_part_id "$internal_dev" resin-boot)

    PART_PREFIX=""
    if [ -e "/dev/${internal_dev}p${EFI_PART_ID}" ]; then
        PART_PREFIX="p"
    fi

    # Relabel former boot partition
    parted -s "/dev/$internal_dev" -- name "$EFI_PART_ID" balena-efi
    mlabel ::balena-efi -i "/dev/${internal_dev}${PART_PREFIX}${EFI_PART_ID}"

    # Find parition IDs
    ROOTA_PART_ID=$(find_part_id "$internal_dev" resin-rootA)
    ROOTB_PART_ID=$(find_part_id "$internal_dev" resin-rootB)
    STATE_PART_ID=$(find_part_id "$internal_dev" resin-state)
    DATA_PART_ID=$(find_part_id "$internal_dev" resin-data)

    # Find partition sizes
    BOOT_PART_SIZE=$(find_part_size "$internal_dev" "$EFI_PART_ID")
    ROOTA_PART_SIZE=$(find_part_size "$internal_dev" "$ROOTA_PART_ID")
    ROOTB_PART_SIZE=$(find_part_size "$internal_dev" "$ROOTB_PART_ID")
    STATE_PART_SIZE=$(find_part_size "$internal_dev" "$STATE_PART_ID")
    DATA_PART_SIZE=$(find_part_size "$internal_dev" "$DATA_PART_ID")

    # Find the beginning of the first partition
    FIRST_PART_ID=$(echo -e "$ROOTA_PART_ID\n$ROOTB_PART_ID\n$STATE_PART_ID\n$DATA_PART_ID" | sort | head -n 1)
    FIRST_PART_START=$(find_part_start "$internal_dev" "$FIRST_PART_ID")

    # Remove partitions that need resizing
    parted -s "/dev/$internal_dev" -- rm "$DATA_PART_ID"
    parted -s "/dev/$internal_dev" -- rm "$STATE_PART_ID"
    parted -s "/dev/$internal_dev" -- rm "$ROOTB_PART_ID"
    parted -s "/dev/$internal_dev" -- rm "$ROOTA_PART_ID"

    # Create new partitions with extra space for LUKS headers
    # LUKS header size is 2MiB
    LUKS_HEADER_SIZE=2

    BOOT_PART_END=$["$FIRST_PART_START" + "$BOOT_PART_SIZE" + "$LUKS_HEADER_SIZE"]
    parted -s "/dev/$internal_dev" -- unit MiB mkpart resin-boot "$FIRST_PART_START" "$BOOT_PART_END"

    ROOTA_PART_END=$["$BOOT_PART_END" + "$ROOTA_PART_SIZE" + "$LUKS_HEADER_SIZE"]
    parted -s "/dev/$internal_dev" -- unit MiB mkpart resin-rootA "$BOOT_PART_END" "$ROOTA_PART_END"

    ROOTB_PART_END=$["$ROOTA_PART_END" + "$ROOTB_PART_SIZE" + "$LUKS_HEADER_SIZE"]
    parted -s "/dev/$internal_dev" -- unit MiB mkpart resin-rootB "$ROOTA_PART_END" "$ROOTB_PART_END"

    STATE_PART_END=$["$ROOTB_PART_END" + "$STATE_PART_SIZE" + "$LUKS_HEADER_SIZE"]
    parted -s "/dev/$internal_dev" -- unit MiB mkpart resin-state "$ROOTB_PART_END" "$STATE_PART_END"

    DATA_PART_END=$["$STATE_PART_END" + "$DATA_PART_SIZE" + "$LUKS_HEADER_SIZE"]
    parted -s "/dev/$internal_dev" -- unit MiB mkpart resin-data "$STATE_PART_END" "$DATA_PART_END"

    for PART_NAME in resin-boot resin-rootA resin-rootB resin-state resin-data; do
        LOOP_PART_ID=$(find_part_id "${LOOP_DEVICE#/dev/}" "$PART_NAME")
        INTERNAL_PART_ID=$(find_part_id "$internal_dev" "$PART_NAME")

        PART_DEV="/dev/$internal_dev$PART_PREFIX$INTERNAL_PART_ID"
        inform "Encrypting $PART_DEV"
        echo -n "$PASSWORD" | cryptsetup luksFormat "$PART_DEV" -
        echo -n "$PASSWORD" | cryptsetup luksOpen "$PART_DEV" "$PART_NAME" --key-file -
        DM_DEV="/dev/mapper/$PART_NAME"
        if [ "$PART_NAME" = "resin-boot" ]; then
            # Just create the FS, we will split boot and efi below
            mkfs.ext4 -L "resin-boot" "$DM_DEV"
            continue
        fi
        inform "Flasing $PART_DEV"
        dd if="${LOOP_DEVICE}p$LOOP_PART_ID" of="$DM_DEV" bs=4M
        sync "$DM_DEV"
    done

    losetup -d "$LOOP_DEVICE"
else
    dd if="/opt/$BALENA_IMAGE" of="/dev/$internal_dev" bs=4M 2> /tmp/dd_progress_log & DD_PID=$!

    if ! kill -0 $DD_PID; then
        fail "Failed to flash internal device $INTERNAL_DEVICE_KERNEL."
    fi

    IMAGE_FILE_SIZE=$(wc -c /opt/"$BALENA_IMAGE" | awk '{print $1}')

    resin-device-progress --percentage 0 --state "Starting flashing balenaOS on internal media" || true

    while kill -USR1 $DD_PID 2>/dev/null; do
        sleep 3
        if [ ! -s /tmp/dd_progress_log ]; then
            continue
        fi
        IMAGE_WRITTEN_BYTES=$(awk 'END{print $1}' /tmp/dd_progress_log)
        let RATIO=$IMAGE_WRITTEN_BYTES*100/$IMAGE_FILE_SIZE || true
        resin-device-progress --percentage $RATIO --state "Flashing balenaOS on internal media" || true
        truncate -s 0 /tmp/dd_progress_log
    done
fi

sync

# Trigger udev
partprobe /dev/"$internal_dev"
udevadm trigger
udevadm settle

# Flash bootloader(s)
if [ -n "$BOOTLOADER_FLASH_DEVICE" ]; then
    if [ -n "$BOOTLOADER_IMAGE" ] && [ -n "$BOOTLOADER_BLOCK_SIZE_OFFSET" ]; then
        dd if="${EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT}/${BOOTLOADER_IMAGE}" of="/dev/${BOOTLOADER_FLASH_DEVICE}" bs="${BOOTLOADER_BLOCK_SIZE_OFFSET}" seek="${BOOTLOADER_SKIP_OUTPUT_BLOCKS}"
        inform "Flashed ${BOOTLOADER_IMAGE} to internal flash"
    else
        fail "BOOTLOADER_IMAGE and/or BOOTLOADER_BLOCK_SIZE_OFFSET are not set."
    fi
else
    inform "No need to flash first stage bootloader to a specific device."
fi

if [ -n "$BOOTLOADER_FLASH_DEVICE_1" ]; then
    if [ -n "$BOOTLOADER_IMAGE_1" ] && [ -n "$BOOTLOADER_BLOCK_SIZE_OFFSET_1" ]; then
        dd if="${EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT}/${BOOTLOADER_IMAGE_1}" of="/dev/${BOOTLOADER_FLASH_DEVICE_1}" bs="${BOOTLOADER_BLOCK_SIZE_OFFSET_1}" seek="${BOOTLOADER_SKIP_OUTPUT_BLOCKS_1}"
        inform "Flashed ${BOOTLOADER_IMAGE_1} to internal flash"
    else
        fail "BOOTLOADER_IMAGE_1 and/or BOOTLOADER_BLOCK_SIZE_OFFSET_1 are not set."
    fi
else
    inform "No need to flash second stage bootloader to a specific device."
fi

# Mount internal device boot partition
mkdir -p $INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT
inform "Mounting internal device boot partition."

if ! mount /dev/disk/by-label/resin-boot $INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT; then
    fail "Failed to mount disk labeled as 'resin-boot'."
fi

if [ "$LUKS" = "1" ]; then
    EFI_MOUNT_DIR="$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/EFI"
    mkdir "$EFI_MOUNT_DIR"
    if ! mount /dev/disk/by-label/BALENA-EFI "$EFI_MOUNT_DIR"; then
        fail "Failed to mount disk labeled as 'BALENA-EFI'."
    fi

    for FILE in $(ls "$EFI_MOUNT_DIR"); do
        if [ "$FILE" = "EFI" ]; then
            continue
        fi

        mv "$EFI_MOUNT_DIR/$FILE" "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/"
    done

    INTERNAL_DEVICE_BOOTLOADER_CONFIG_PATH="/EFI$INTERNAL_DEVICE_BOOTLOADER_CONFIG_PATH"
fi

# Copy custom splash dir
mkdir -p "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$SPLASH_DIRNAME"
cp -r $EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$SPLASH_DIRNAME/* $INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$SPLASH_DIRNAME
# Copy Network Manager connection files
CONFIG_NM="${BALENA_BOOT_MOUNTPOINT}/system-connections/"
if [ -d "$CONFIG_NM" ]; then
    inform "Transferring system connections on the internal device."
    rm -rf "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/system-connections/"
    cp -rvf "$CONFIG_NM" "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT"
else
    inform "No system connections found to transfer on the internal device."
fi
# Copy proxy configuration files
CONFIG_PROXY="${BALENA_BOOT_MOUNTPOINT}/system-proxy/"
if [ -d "$CONFIG_PROXY" ]; then
    inform "Transferring proxy configuration on the internal device."
    rm -rf "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/system-proxy/"
    cp -rvf "$CONFIG_PROXY" "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT"
else
    inform "No proxy configuration found to transfer on the internal device."
fi
# Copy bootloader config file
if [ -n "${INTERNAL_DEVICE_BOOTLOADER_CONFIG}" ] && [ -f "${EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT}/${INTERNAL_DEVICE_BOOTLOADER_CONFIG}" ]; then
        if [[ -z "${INTERNAL_DEVICE_BOOTLOADER_CONFIG_PATH}" ]]; then
            fail "INTERNAL_DEVICE_BOOTLOADER_CONFIG needs INTERNAL_DEVICE_BOOTLOADER_CONFIG_PATH to be set."
        fi

        cp "$EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$INTERNAL_DEVICE_BOOTLOADER_CONFIG" "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$INTERNAL_DEVICE_BOOTLOADER_CONFIG_PATH"
        if [ -f "$EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$INTERNAL_DEVICE_BOOTLOADER_CONFIG.sig" ]; then
            cp "$EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$INTERNAL_DEVICE_BOOTLOADER_CONFIG.sig" "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$INTERNAL_DEVICE_BOOTLOADER_CONFIG_PATH.sig"
        fi

        if [ -n "${INTERNAL_DEVICE_BOOTLOADER_LEGACY_CONFIG_PATH}" ]; then
            cp "$EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$INTERNAL_DEVICE_BOOTLOADER_CONFIG" "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$INTERNAL_DEVICE_BOOTLOADER_LEGACY_CONFIG_PATH"
        fi
fi

# Copy resinOS bootloader config file
if [ -f "${EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT}/${BALENA_BOOTLOADER_CONFIG}" ]; then
        cp $EXTERNAL_DEVICE_BOOT_PART_MOUNTPOINT/$BALENA_BOOTLOADER_CONFIG $INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT
fi

# Give a chance for the device to register
STARTTIME=$(date +%s)
ENDTIME="$STARTTIME"
TIMEOUT=10
while [ "$(systemctl is-active resin-device-register.service)" != "active" ]
do
    if [ $((ENDTIME - STARTTIME)) -le $TIMEOUT ]; then
        sleep 1 && ENDTIME=$((ENDTIME + 1))
    else
        inform "Timeout while waiting for register to finish. No network?"
        break
    fi
done

# Copy json configuration file from external (flasher) to the internal (booting) device
cp -rvf "$CONFIG_PATH" "$INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT"

if [ "$LUKS" = "1" ]; then
    umount "$EFI_MOUNT_DIR"
fi

umount $INTERNAL_DEVICE_BOOT_PART_MOUNTPOINT

if [ "$LUKS" = "1" ]; then
    for PART_NAME in resin-boot resin-rootA resin-rootB resin-state resin-data; do
        cryptsetup luksClose "$PART_NAME"
    done
fi

sync

inform "Board specific flash procedure..."
/usr/bin/resin-init-flasher-board

resin-device-progress --percentage 100 --state "Post-Provisioning" || true

inform "Shutting down ..."
shutdown -h now

exit 0
