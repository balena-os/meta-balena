#!/bin/sh

# shellcheck disable=SC1091
. /usr/libexec/os-helpers-logging
. /usr/libexec/os-helpers-fs
. /usr/libexec/os-helpers-tpm2
. /usr/libexec/os-helpers-efi
. /usr/sbin/balena-config-defaults

# Give a chance to the by-state directory to appear
# We do not expect any particular device or partition to come up
# but if balenaOS is correctly configured on the device the by-state
# directory will eventually be created by the custom udev rule.
# This is useful if the rootfs is on a device that takes a while
# to initialize such as a USB disk.
wait4file "/dev/disk/by-state" "50"
EFI_DEV=$(get_state_path_from_label "${BALENA_NONENC_BOOT_LABEL}")

ensure_luks2() {
    LUKS_DEVICE="$1"

    LUKS_VERSION=$(cryptsetup luksDump "${LUKS_DEVICE}" | grep "^Version:" | cut -f 2)

    if [ "${LUKS_VERSION}" = 1 ]; then
        info "Converting ${LUKS_DEVICE} to LUKS2"
        cryptsetup convert -q --type luks2 "${LUKS_DEVICE}"
    fi
}

cryptsetup_enabled() {
    # Ensure that hook runs when in user mode
    if user_mode_enabled; then
	    return 0
    fi

    return 1
}

cryptsetup_run() {
    # Die if anything fails here
    set -e

    EFI_MOUNT_DIR="/efi"
    mkdir "$EFI_MOUNT_DIR"
    mount "$EFI_DEV" "$EFI_MOUNT_DIR"

    PCRS="sha256:0,2,3,7"
    printf "Attempting to unlock LUKS passphrase with PCRS %s\n" "$PCRS"
    tpm2_pcrread "${PCRS}"

    PASSPHRASE_FILE=/balena-luks.pwd
    SESSION_CTX="$(mktemp -t)"
    POLICY_PATH="$(find "$EFI_MOUNT_DIR" -name "policies.*")"
    tpm2_startauthsession --policy-session -S "${SESSION_CTX}"
    tpm2_policypcr -S "${SESSION_CTX}" -l "${PCRS}"

    # combined multiple policies with tpm2_policyor
    POLICIES="$(find "${POLICY_PATH}" -type f | sort | xargs)"
    if [ "$(echo "${POLICIES}" | wc -w)" -gt 1 ]; then
        tpm2_policyor -S "${SESSION_CTX}" "sha256:$(echo "${POLICIES}" | sed 's/ /,/g')"
    fi

    if hw_decrypt_passphrase "$EFI_MOUNT_DIR" "session:${SESSION_CTX}" "$PASSPHRASE_FILE"; then
        info "Successfully unlocked LUKS passphrase using the TPM"
    elif hw_decrypt_passphrase "$EFI_MOUNT_DIR" "pcr:sha256:0,1,2,3" "$PASSPHRASE_FILE"; then
        info "Unlocked LUKS passphrase without PCR7, will re-encrypt after rollback-health"
    else
        umount "$EFI_MOUNT_DIR"
        fail "Failed to unlock LUKS passphrase using the TPM"
    fi

    BOOT_DEVICE=$(lsblk -nlo pkname "${EFI_DEV}")

    # Unlock all the partitions - cryptsetup luksOpen does not wait for udev processing
    # of the DM device to complete, it just kicks off the process and returns.
    # Since this is async, we can perform all the luksOpens here, note the device names
    # and wait for them in a separate loop later
    LUKS_UNLOCKED=""
    for LUKS_UUID in $(lsblk -nlo uuid,fstype "/dev/${BOOT_DEVICE}" | grep crypto_LUKS | cut -d " " -f 1); do
        ensure_luks2 "/dev/disk/by-uuid/${LUKS_UUID}"
        cryptsetup luksOpen --key-file $PASSPHRASE_FILE UUID="${LUKS_UUID}" luks-"${LUKS_UUID}"
        LUKS_UNLOCKED="${LUKS_UNLOCKED} luks-${LUKS_UUID}"
    done

    # Wait for udev processing of each unlocked device
    for DM_NAME in ${LUKS_UNLOCKED}; do
        wait4udev "/dev/mapper/${DM_NAME}"
    done

    rm -f "$PASSPHRASE_FILE"
    umount "$EFI_MOUNT_DIR"
    rmdir "$EFI_MOUNT_DIR"

    # Revert dying on error
    set +e
}
