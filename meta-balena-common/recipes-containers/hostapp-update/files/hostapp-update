#!/bin/sh

set -eu

run_current_hooks_and_recover () {
	if [ "$hooks_rollback" = 1 ]; then
		# Run the current ones to cleanup the system.
		echo "Failed to run the new hooks. Running current hooks... "
		DURING_UPDATE=0 hostapp-update-hooks || true
	else
		echo "Failed to run the new hooks... "
	fi
	# unmount if we have mounted the new rootfs
	umount $new_rootfs || true
	echo "Update failed."
	exit 1
}

# Help function
hostapp_update_help() {
    cat << EOF
Process host OS update.
$0 <OPTION>

Options:
  -h, --help
        Display this help and exit.

  -f <FILE>, --file <FILE>
        Update host OS from local docker image file.

  -i <IMAGE>, --image <IMAGE>
	Update host OS from remote docker image.

  --tmp-dir-symlink <DIR>
	Path to directory that would be symlinked to be used as balena tmp dir
	(so that the initial untar of the offline hostos image won't fill up
	the /mnt/sysroot/inactive partition).

  -r, --reboot
        Reboot after update.

  -n, --no-hooks
        Don't process hooks.

  -x, --no-rollback-hooks
        Don't process rollback hooks.
EOF
}

local_image=""
remote_image=""
tmp_dir_symlink=""
reboot=0
hooks=1
hooks_rollback=1

# Parse arguments
while [ $# -gt 0 ]; do
    arg="$1"

    case $arg in
        -h|--help)
            hostapp_update_help
            exit 0
            ;;
        -f|--file)
            if [ -z "$2" ]; then
                echo "ERROR: \"$1\" argument needs a value."
                exit 1
            fi
            if [ ! -s "$2" ]; then
                echo "ERROR: \"$2\" file is invalid."
                exit 1
            fi
	    local_image=$(realpath "$2")
            shift
            ;;
        -i|--image)
            if [ -z "$2" ]; then
                echo "ERROR: \"$1\" argument needs a value."
                exit 1
            fi
            remote_image="$2"
            shift
            ;;
        --tmp-dir-symlink)
            if [ -z "$2" ]; then
                echo "ERROR: \"$1\" argument needs a value."
                exit 1
            fi
	    if [ ! -d "$2" ]; then
                echo "ERROR: \"$2\" is not a directory."
                exit 1
            fi
            tmp_dir_symlink="$2"
            shift
            ;;
        -r|--reboot)
            reboot=1
            ;;
        -n|--no-hooks)
            hooks=0
            ;;
        -x|--no-rollback-hooks)
            hooks_rollback=0
            ;;
        *)
            echo "ERROR: Unrecognized option $1."
            exit 1
            ;;
    esac
    shift
done

if [ "$local_image" =  "" ] && [ "$remote_image" = "" ]; then
	echo "At least one of -f or -i is required"
	exit 1
fi

export DOCKER_HOST="unix:///var/run/balena-host.sock"
SYSROOT="/mnt/sysroot/inactive"

if [ -d /mnt/state ]; then
	# Save VPN state for rollbacks
	if [ -e /var/run/openvpn/vpn_status/active ]; then
		echo "BALENAOS_ROLLBACK_VPNONLINE=1" > /mnt/state/rollback-health-variables ;
	else
		echo "BALENAOS_ROLLBACK_VPNONLINE=0" > /mnt/state/rollback-health-variables ;
	fi
	sync -f /mnt/state
fi

# Initialize sysroot
mkdir -p /mnt/sysroot
for dir in 'dev' 'etc' 'balena' 'hostapps' 'mnt/state' 'proc' 'sbin' 'sys' 'tmp'; do
	mkdir -p "$SYSROOT/$dir"
done
if [ -d "$tmp_dir_symlink" ]; then
	rm -fr "$SYSROOT/balena/tmp"
	ln -s "$tmp_dir_symlink" "$SYSROOT/balena/tmp"
elif [ -L "$SYSROOT/balena/tmp" ]; then
	rm "$SYSROOT/balena/tmp"
	mkdir "$SYSROOT/balena/tmp"
fi
if [ ! -f "$SYSROOT/etc/machine-id" ]; then
	touch "$SYSROOT/etc/machine-id"
fi
if [ ! -L "$SYSROOT/sbin/init" ]; then
	ln -sf /current/boot/init "$SYSROOT/sbin/init"
fi
if [ ! -L "$SYSROOT/boot" ]; then
	ln -sf /current/boot "$SYSROOT/boot"
fi

# Remove previous hostapp
for container in $(balena ps --all --quiet); do
	balena rm --force --volumes "$container"
done
for image in $(balena images --all --quiet); do
	balena rmi --force "$image"
done
for hostapp in "$SYSROOT/hostapps/"*; do
	[ -e "$hostapp" ] || break
	rm -rf "$hostapp"
done

# Load new hostapp
if [ "$local_image" != "" ]; then
	HOSTAPP_IMAGE=$(balena load --quiet -i "$local_image" | cut -d: -f1 --complement | tr -d ' ')
elif [ "$remote_image" != "" ]; then
	HOSTAPP_IMAGE="$remote_image"
	balena pull "$HOSTAPP_IMAGE"
fi
CONTAINER_ID=$(balena create --runtime="bare" --volume=/boot "$HOSTAPP_IMAGE" /bin/sh)
BOOTSTRAP=$(balena inspect -f "{{range .Mounts}}{{.Destination}} {{.Source}}{{end}}" "$CONTAINER_ID" | awk '$1 == "/boot" { print $2 }' | head -n1)

# Create boot entry
rm -rf "$SYSROOT/hostapps/.new"
mkdir -p "$SYSROOT/hostapps/.new"
ln -sr "$BOOTSTRAP" "$SYSROOT/hostapps/.new/boot"
sync -f "$SYSROOT"
mv -T "$SYSROOT/hostapps/.new" "$SYSROOT/hostapps/$CONTAINER_ID"
sync -f "$SYSROOT"

# Mark it as current hostapp
ln -srf "$SYSROOT/hostapps/$CONTAINER_ID" "$SYSROOT/current.new"
sync -f "$SYSROOT"
mv -T "$SYSROOT/current.new" "$SYSROOT/current"
sync -f "$SYSROOT"

if [ "$hooks" = 1 ]; then
	# Run before from the new OS we are updating to in existing OS environment
	new_rootfs=$($SYSROOT/current/boot/init -sysroot $SYSROOT)
	if [ -f "$new_rootfs/usr/bin/hostapp-update-hooks-v2" ]; then
		if DURING_UPDATE=1 $new_rootfs/usr/bin/hostapp-update-hooks-v2 --before --dir "$new_rootfs/etc/hostapp-update-hooks.d/" ; then
			echo "Before hooks (old os) ran successfully"
		else
			run_current_hooks_and_recover
		fi
	fi
	umount $new_rootfs

	# Run the defined hooks in the host OS we update to in new OS environment
	if balena run --privileged --rm -v /dev:/dev -v /mnt:/mnt -e DURING_UPDATE=1 "$HOSTAPP_IMAGE" hostapp-update-hooks; then
		echo "New/Forward hooks (new os container) ran successfully."
	else
		run_current_hooks_and_recover
	fi

	# Run after from the new OS we are updating to in existing OS environment
	new_rootfs=$($SYSROOT/current/boot/init -sysroot $SYSROOT)
	if [ -f "$new_rootfs/usr/bin/hostapp-update-hooks-v2" ]; then
		if DURING_UPDATE=1 $new_rootfs/usr/bin/hostapp-update-hooks-v2 --after --dir "$new_rootfs/etc/hostapp-update-hooks.d/"; then
			echo "After hooks (old os) ran successfully"
		else
			run_current_hooks_and_recover
		fi
	fi
	umount $new_rootfs
fi

# Mark it as current partition
cur_counter=0
if [ -f "/mnt/sysroot/active/counter" ]; then
	cur_counter=$(cat /mnt/sysroot/active/counter)
fi
echo $((cur_counter + 1)) > "$SYSROOT/counter.new"
sync -f "$SYSROOT"
mv "$SYSROOT/counter.new" "$SYSROOT/counter"
sync -f "$SYSROOT"

if [ "$reboot" = 1 ]; then
	reboot
fi
