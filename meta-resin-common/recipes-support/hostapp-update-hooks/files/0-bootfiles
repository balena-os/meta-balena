#!/bin/sh

#
# Script to deploy the boot files from rootfs (in container) to the boot
# partition
#

set -o errexit

# Variables
container_id="$1"
bootfiles_list="@RESIN_BOOTFILES_LIST@"
boot_fingerprint="@RESIN_BOOT_FINGERPRINT@"
bootfiles_blacklist="\
	/config.json \
	/config.txt \
	/splash/resin-logo.png \
	"
boot_mountpoint="/mnt/boot"

# Checks if a file is present in the blacklist
# Arguments:
# 	$1: file to be checked
# Return value:
# 	0: file is blacklisted
# 	1: file si not blacklisted
isBlacklisted() {
	local _file="$1"
	for b in $bootfiles_blacklist; do
		if [ "$b" = "$_file" ]; then
			return 0
		fi
	done
	return 1
}

# Checks if a file was modified by verifying its fingerprint
# Arguments:
# 	$1: file to be checked
# Return value:
# 	0: file is modified
# 	1: file is not modified
isModified() {
	local _file="$1"
	local _current_md5
	_current_md5="$(md5sum "$boot_mountpoint/$_file" | awk '{print $1}')"
	local _initial_md5
	_initial_md5="$(grep "$_file" < "$boot_mountpoint/$boot_fingerprint" | awk '{print $1}')"
	if [ "$_current_md5" != "$_initial_md5" ]; then
		return 0
	else
		return 1
	fi
}

# Copies a file from a container to the boot filesystem atomically and durable
# Arguments:
# 	$1: boot partition file
copyFromContainer() {
	local _file="$1"
	mkdir -p "$boot_mountpoint/$(dirname "$_file")"
	docker cp "$container_id:/resin-boot/$_file" "$boot_mountpoint/$_file.new"
	sync -f $boot_mountpoint
	mv "$boot_mountpoint/$_file.new" "$boot_mountpoint/$_file"
	sync -f $boot_mountpoint
}

# Deploys file from docker container to boot partition
# Arguments:
# 		$1: file path relative to boot partition's root
deploy() {
	local _file="$1"
	printf "[INFO] Deploying %s%s..." "${boot_mountpoint}" "${_file}"
	if isModified "$_file"; then
		if isBlacklisted "$_file"; then
			printf " file modified but blacklisted. Ignoring.\n"
		else
			printf " overwriting modified file..."
			copyFromContainer "$_file"
			printf " done.\n"
		fi
	else
		copyFromContainer "$_file"
		printf " done.\n"
	fi
}


#
# MAIN
#

export DOCKER_HOST="unix:///var/run/docker-host.sock"

if [ -z "$container_id" ]; then
	echo "[ERROR] Container ID provided as an argument is needed."
	exit 1
fi

# Deploy all files in the bootfiles list
bootfiles_list_new="/tmp/$(basename $bootfiles_list).new"
docker cp "$container_id:$bootfiles_list" "$bootfiles_list_new"
while read entry; do
	deploy "$entry"
done < "$bootfiles_list_new"
