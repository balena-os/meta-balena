#!/bin/bash
set -o pipefail

source /usr/sbin/resin-vars

# A temporary file used until next reboot
UPDATECONF=/tmp/update-supervisor.conf

if [ -z "$API_ENDPOINT" -o -z "$CONFIG_PATH" ]; then
    echo "Environment variables API_ENDPOINT and CONFIG_PATH must be set."
    exit 1
fi

read API_KEY DEVICE_ID <<<$(jq -r '.apiKey,.deviceId' $CONFIG_PATH)
if [ -z "$API_KEY" -o -z "$DEVICE_ID" ]; then
    echo "JSON in config file $CONFIG_PATH must have apiKey and deviceId attributes."
    exit 1
fi

function error_handler {
    # If docker pull fails, start the old supervisor again and exit
    rm -rf $UPDATECONF
    systemctl start resin-supervisor
    exit 1
}

trap 'error_handler $LINENO' ERR

# Get target supervisor tag from API.
# The script will exit if curl does not get a valid response.
# Getting data separately before reading it fixes error handling.
echo "Getting image name and tag..."
data=$(curl --silent --header "User-Agent:" --compressed "$API_ENDPOINT/ewa/supervisor_release?\$filter=device/id%20eq%20$DEVICE_ID&apikey=$API_KEY" | jq -e -r '.d[0].supervisor_version,.d[0].image_name')
read tag image_name <<<$data

# Check that we didn't somehow get an empty tag version.
if [ -z "$tag" ]; then
    error_handler $LINENO "no tag"
fi

# Get image id of tag. This will be non-empty only in case it's already downloaded.
echo "Getting image id..."
imageid=$(docker inspect -f '{{.Id}}' "$image_name:$tag") || imageid=""

# Check if image is downloaded and there is a running container.
# The second condition is needed to make sure the image has not stopped since we first run it.
echo "Getting check if already updated image is running..."
if [[ -n "$imageid" && $(docker ps -q --no-trunc | xargs docker inspect -f '{{.Image}}' | grep "$imageid") ]]; then
    echo "Latest supervisor version already running."
    exit 0
fi

# Try to stop old supervisor to prevent from deleting the intermediate images while downloading the new one
echo "Stop supervisor..."
systemctl stop resin-supervisor

# Store the tagged image string so resin-supervisor.service can pick it up
echo "SUPERVISOR_IMAGE=$image_name:$tag" > $UPDATECONF

# Pull target version.
echo "Update supervisor..."
docker pull "$image_name:$tag"

# Run supervisor with the device-type-specific options.
# We give a specific name to the container to guarantee only one running.
echo "Start supervisor..."
systemctl start resin-supervisor

# Mark supervisor as working. This version will run when the device reboots.
echo "Mark pulled tag as latest..."
docker tag -f "$image_name:$tag" "$image_name:latest"
sed --in-place "s|SUPERVISOR_IMAGE=.*|SUPERVISOR_IMAGE=$image_name|" /etc/supervisor.conf
