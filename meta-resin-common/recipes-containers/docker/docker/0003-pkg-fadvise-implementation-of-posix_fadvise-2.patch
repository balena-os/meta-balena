From f989ad2f2accdc280a924e8a39987a9fff5be775 Mon Sep 17 00:00:00 2001
From: Petros Angelatos <petrosagg@gmail.com>
Date: Wed, 30 Nov 2016 18:11:21 +0000
Subject: [PATCH 14/15] pkg/fadvise: implementation of posix_fadvise(2)

This package adds support for the posix_fadvise(2) system call. This is
intended to be used during docker pull to avoid polluting the page cache
since it touches a large amount of files.

Upstream-Status: Pending
Signed-off-by: Petros Angelatos <petrosagg@gmail.com>
---
 pkg/fadvise/constants_linux.go       | 12 ++++++++++++
 pkg/fadvise/constants_linux_s390x.go | 10 ++++++++++
 pkg/fadvise/fadvise.go               |  7 +++++++
 pkg/fadvise/fadvise_64bit.go         | 13 +++++++++++++
 pkg/fadvise/fadvise_linux_386.go     | 11 +++++++++++
 pkg/fadvise/fadvise_linux_arm.go     | 11 +++++++++++
 6 files changed, 64 insertions(+)
 create mode 100644 pkg/fadvise/constants_linux.go
 create mode 100644 pkg/fadvise/constants_linux_s390x.go
 create mode 100644 pkg/fadvise/fadvise.go
 create mode 100644 pkg/fadvise/fadvise_64bit.go
 create mode 100644 pkg/fadvise/fadvise_linux_386.go
 create mode 100644 pkg/fadvise/fadvise_linux_arm.go

diff --git a/pkg/fadvise/constants_linux.go b/pkg/fadvise/constants_linux.go
new file mode 100644
index 0000000..f30e5a6
--- /dev/null
+++ b/pkg/fadvise/constants_linux.go
@@ -0,0 +1,12 @@
+// +build !s390x
+
+package fadvise
+
+const (
+	POSIX_FADV_NORMAL     = 0 /* No further special treatment.  */
+	POSIX_FADV_RANDOM     = 1 /* Expect random page references.  */
+	POSIX_FADV_SEQUENTIAL = 2 /* Expect sequential page references.  */
+	POSIX_FADV_WILLNEED   = 3 /* Will need these pages.  */
+	POSIX_FADV_DONTNEED   = 4 /* Don't need these pages.  */
+	POSIX_FADV_NOREUSE    = 5 /* Data will be accessed once.  */
+)
diff --git a/pkg/fadvise/constants_linux_s390x.go b/pkg/fadvise/constants_linux_s390x.go
new file mode 100644
index 0000000..690cd26
--- /dev/null
+++ b/pkg/fadvise/constants_linux_s390x.go
@@ -0,0 +1,10 @@
+package fadvise
+
+const (
+	POSIX_FADV_NORMAL     = 0 /* No further special treatment.  */
+	POSIX_FADV_RANDOM     = 1 /* Expect random page references.  */
+	POSIX_FADV_SEQUENTIAL = 2 /* Expect sequential page references.  */
+	POSIX_FADV_WILLNEED   = 3 /* Will need these pages.  */
+	POSIX_FADV_DONTNEED   = 6 /* Don't need these pages.  */
+	POSIX_FADV_NOREUSE    = 7 /* Data will be accessed once.  */
+)
diff --git a/pkg/fadvise/fadvise.go b/pkg/fadvise/fadvise.go
new file mode 100644
index 0000000..a2f2c8f
--- /dev/null
+++ b/pkg/fadvise/fadvise.go
@@ -0,0 +1,7 @@
+package fadvise
+
+import "os"
+
+func PosixFadvise(file *os.File, offset, length int64, advice int) error {
+	return posixFadvise64(int(file.Fd()), offset, length, advice)
+}
diff --git a/pkg/fadvise/fadvise_64bit.go b/pkg/fadvise/fadvise_64bit.go
new file mode 100644
index 0000000..2837226
--- /dev/null
+++ b/pkg/fadvise/fadvise_64bit.go
@@ -0,0 +1,13 @@
+// +build linux,amd64 linux,arm64 linux,s390x
+
+package fadvise
+
+import "syscall"
+
+func posixFadvise64(fd int, offset, length int64, advice int) (err error) {
+	_, _, e1 := syscall.Syscall6(syscall.SYS_FADVISE64, uintptr(fd), uintptr(offset), uintptr(offset>>32), uintptr(length), uintptr(length>>32), uintptr(advice))
+	if e1 != 0 {
+		err = e1
+	}
+	return
+}
diff --git a/pkg/fadvise/fadvise_linux_386.go b/pkg/fadvise/fadvise_linux_386.go
new file mode 100644
index 0000000..1edfffd
--- /dev/null
+++ b/pkg/fadvise/fadvise_linux_386.go
@@ -0,0 +1,11 @@
+package fadvise
+
+import "syscall"
+
+func posixFadvise64(fd int, offset, length int64, advice int) (err error) {
+	_, _, e1 := syscall.Syscall6(syscall.SYS_FADVISE64_64, uintptr(fd), uintptr(offset), uintptr(offset>>32), uintptr(length), uintptr(length>>32), uintptr(advice))
+	if e1 != 0 {
+		err = e1
+	}
+	return
+}
diff --git a/pkg/fadvise/fadvise_linux_arm.go b/pkg/fadvise/fadvise_linux_arm.go
new file mode 100644
index 0000000..0e9115f
--- /dev/null
+++ b/pkg/fadvise/fadvise_linux_arm.go
@@ -0,0 +1,11 @@
+package fadvise
+
+import "syscall"
+
+func posixFadvise64(fd int, offset, length int64, advice int) (err error) {
+	_, _, e1 := syscall.Syscall6(syscall.SYS_ARM_FADVISE64_64, uintptr(fd), uintptr(advice), uintptr(offset), uintptr(offset>>32), uintptr(length), uintptr(length>>32))
+	if e1 != 0 {
+		err = e1
+	}
+	return
+}
-- 
2.10.2

