From 9e9d9b64dd9e4b0b6ad0baa406f86a08fa3cde0d Mon Sep 17 00:00:00 2001
From: Petros Angelatos <petrosagg@gmail.com>
Date: Tue, 1 Nov 2016 15:07:32 +0000
Subject: [PATCH 8/8] daemon: cleanup as early as possible

`cleanupContainer` can fail to delete a container name from nameIndex if
for example `container.ToDiskLocking()` fails. This is a problem because
users of this function rely on it always cleaning up to ensure the
in-memory data structures are consistent.

One user is Daemon.newContainer() which first updates the nameIndex, and
then registers the container, calling `cleanupContainer` whenever
anything fails inbetween.

Partial solution for #23371

Upstream-Status: Submitted [https://github.com/docker/docker/pull/27956]
Signed-off-by: Petros Angelatos <petrosagg@gmail.com>
---
 daemon/delete.go | 26 +++++++++++++-------------
 1 file changed, 13 insertions(+), 13 deletions(-)

diff --git a/daemon/delete.go b/daemon/delete.go
index 10028e1..da6d3c4 100644
--- a/daemon/delete.go
+++ b/daemon/delete.go
@@ -78,6 +78,22 @@ func (daemon *Daemon) rmLink(container *container.Container, name string) error
 // cleanupContainer unregisters a container from the daemon, stops stats
 // collection and cleanly removes contents and metadata from the filesystem.
 func (daemon *Daemon) cleanupContainer(container *container.Container, forceRemove, removeVolume bool) (err error) {
+	// If force removal is required, delete container from various
+	// indexes even if removal failed.
+	defer func() {
+		if err == nil || forceRemove {
+			daemon.nameIndex.Delete(container.ID)
+			daemon.linkIndex.delete(container)
+			selinuxFreeLxcContexts(container.ProcessLabel)
+			daemon.idIndex.Delete(container.ID)
+			daemon.containers.Delete(container.ID)
+			if e := daemon.removeMountPoints(container, removeVolume); e != nil {
+				logrus.Error(e)
+			}
+			daemon.LogContainerEvent(container, "destroy")
+		}
+	}()
+
 	if container.IsRunning() {
 		if !forceRemove {
 			err := fmt.Errorf("You cannot remove a running container %s. Stop the container before attempting removal or use -f", container.ID)
@@ -106,22 +122,6 @@ func (daemon *Daemon) cleanupContainer(container *container.Container, forceRemo
 		logrus.Errorf("Error saving dying container to disk: %v", err)
 	}
 
-	// If force removal is required, delete container from various
-	// indexes even if removal failed.
-	defer func() {
-		if err == nil || forceRemove {
-			daemon.nameIndex.Delete(container.ID)
-			daemon.linkIndex.delete(container)
-			selinuxFreeLxcContexts(container.ProcessLabel)
-			daemon.idIndex.Delete(container.ID)
-			daemon.containers.Delete(container.ID)
-			if e := daemon.removeMountPoints(container, removeVolume); e != nil {
-				logrus.Error(e)
-			}
-			daemon.LogContainerEvent(container, "destroy")
-		}
-	}()
-
 	if err = os.RemoveAll(container.Root); err != nil {
 		return fmt.Errorf("Unable to remove filesystem for %v: %v", container.ID, err)
 	}
-- 
2.7.4

