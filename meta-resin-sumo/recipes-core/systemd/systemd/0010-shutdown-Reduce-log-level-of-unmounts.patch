From 456b2199f6ef0378da007e71347657bcf83ae465 Mon Sep 17 00:00:00 2001
From: Jan Janssen <medhefgo@web.de>
Date: Mon, 12 Mar 2018 13:33:16 +0100
Subject: [PATCH] shutdown: Reduce log level of unmounts

There is little point in logging about unmounting errors if the
exact mountpoint will be successfully unmounted in a later retry
due unmounts below it having been removed.

Additionally, don't log those errors if we are going to switch back
to a initrd, because that one is also likely to finalize the remaining
mountpoints. If not, it will log errors then.

Upstream-Status: Backport
Signed-off-by: Florin Sarbu <florin@balena.io>
---
 src/core/shutdown.c | 24 +++++++++++++++++-------
 src/core/umount.c   | 38 +++++++++++++++++++-------------------
 src/core/umount.h   |  6 +++---
 3 files changed, 39 insertions(+), 29 deletions(-)

diff --git a/src/core/shutdown.c b/src/core/shutdown.c
index cc31b33..f9c2c9c 100644
--- a/src/core/shutdown.c
+++ b/src/core/shutdown.c
@@ -268,11 +268,11 @@ static void sync_with_progress(void) {
 
 int main(int argc, char *argv[]) {
         bool need_umount, need_swapoff, need_loop_detach, need_dm_detach;
-        bool in_container, use_watchdog = false;
+        bool in_container, use_watchdog = false, can_initrd;
         _cleanup_free_ char *cgroup = NULL;
         char *arguments[3];
         unsigned retries;
-        int cmd, r;
+        int cmd, r, umount_log_level = LOG_INFO;
         static const char* const dirs[] = {SYSTEM_SHUTDOWN_PATH, NULL};
         char *watchdog_device;
 
@@ -345,6 +345,7 @@ int main(int argc, char *argv[]) {
         need_swapoff = !in_container;
         need_loop_detach = !in_container;
         need_dm_detach = !in_container;
+        can_initrd = !in_container && !in_initrd() && access("/run/initramfs/shutdown", X_OK) == 0;
 
         /* Unmount all mountpoints, swaps, and loopback devices */
         for (retries = 0; retries < FINALIZE_ATTEMPTS; retries++) {
@@ -362,7 +363,7 @@ int main(int argc, char *argv[]) {
 
                 if (need_umount) {
                         log_info("Unmounting file systems.");
-                        r = umount_all(&changed);
+                        r = umount_all(&changed, umount_log_level);
                         if (r == 0) {
                                 need_umount = false;
                                 log_info("All filesystems unmounted.");
@@ -386,7 +387,7 @@ int main(int argc, char *argv[]) {
 
                 if (need_loop_detach) {
                         log_info("Detaching loop devices.");
-                        r = loopback_detach_all(&changed);
+                        r = loopback_detach_all(&changed, umount_log_level);
                         if (r == 0) {
                                 need_loop_detach = false;
                                 log_info("All loop devices detached.");
@@ -398,7 +399,7 @@ int main(int argc, char *argv[]) {
 
                 if (need_dm_detach) {
                         log_info("Detaching DM devices.");
-                        r = dm_detach_all(&changed);
+                        r = dm_detach_all(&changed, umount_log_level);
                         if (r == 0) {
                                 need_dm_detach = false;
                                 log_info("All DM devices detached.");
@@ -415,6 +416,16 @@ int main(int argc, char *argv[]) {
                         goto initrd_jump;
                 }
 
+                if (!changed && umount_log_level == LOG_INFO && !can_initrd) {
+                        /* There are things we cannot get rid of. Loop one more time
+                         * with LOG_ERR to inform the user. Note that we don't need
+                         * to do this if there is a initrd to switch to, because that
+                         * one is likely to get rid of the remounting mounts. If not,
+                         * it will log about them. */
+                        umount_log_level = LOG_ERR;
+                        continue;
+                }
+
                 /* If in this iteration we didn't manage to
                  * unmount/deactivate anything, we simply give up */
                 if (!changed) {
@@ -446,8 +457,7 @@ int main(int argc, char *argv[]) {
         arguments[2] = NULL;
         execute_directories(dirs, DEFAULT_TIMEOUT_USEC, NULL, NULL, arguments);
 
-        if (!in_container && !in_initrd() &&
-            access("/run/initramfs/shutdown", X_OK) == 0) {
+        if (can_initrd) {
                 r = switch_root_initramfs();
                 if (r >= 0) {
                         argv[0] = (char*) "/shutdown";
diff --git a/src/core/umount.c b/src/core/umount.c
index 45c28aa..bdea0ae 100644
--- a/src/core/umount.c
+++ b/src/core/umount.c
@@ -414,7 +414,7 @@ static bool nonunmountable_path(const char *path) {
                 || path_startswith(path, "/run/initramfs");
 }
 
-static int remount_with_timeout(MountPoint *m) {
+static int remount_with_timeout(MountPoint *m, int umount_log_level) {
         pid_t pid;
         int r;
 
@@ -435,7 +435,7 @@ static int remount_with_timeout(MountPoint *m) {
                 /* Start the mount operation here in the child */
                 r = mount(NULL, m->path, NULL, m->remount_flags, m->remount_options);
                 if (r < 0)
-                        log_error_errno(errno, "Failed to remount '%s' read-only: %m", m->path);
+                        log_full_errno(umount_log_level, errno, "Failed to remount '%s' read-only: %m", m->path);
 
                 _exit(r < 0 ? EXIT_FAILURE : EXIT_SUCCESS);
         }
@@ -450,7 +450,7 @@ static int remount_with_timeout(MountPoint *m) {
         return r;
 }
 
-static int umount_with_timeout(MountPoint *m) {
+static int umount_with_timeout(MountPoint *m, int umount_log_level) {
         pid_t pid;
         int r;
 
@@ -477,7 +477,7 @@ static int umount_with_timeout(MountPoint *m) {
                  * then return EBUSY).*/
                 r = umount2(m->path, MNT_FORCE);
                 if (r < 0)
-                        log_error_errno(errno, "Failed to unmount %s: %m", m->path);
+                        log_full_errno(umount_log_level, errno, "Failed to unmount %s: %m", m->path);
 
                 _exit(r < 0 ? EXIT_FAILURE : EXIT_SUCCESS);
         }
@@ -494,7 +494,7 @@ static int umount_with_timeout(MountPoint *m) {
 
 /* This includes remounting readonly, which changes the kernel mount options.
  * Therefore the list passed to this function is invalidated, and should not be reused. */
-static int mount_points_list_umount(MountPoint **head, bool *changed) {
+static int mount_points_list_umount(MountPoint **head, bool *changed, int umount_log_level) {
         MountPoint *m;
         int n_failed = 0;
 
@@ -523,7 +523,7 @@ static int mount_points_list_umount(MountPoint **head, bool *changed) {
                          * Since the remount can hang in the instance of
                          * remote filesystems, we remount asynchronously
                          * and skip the subsequent umount if it fails. */
-                        if (remount_with_timeout(m) < 0) {
+                        if (remount_with_timeout(m, umount_log_level) < 0) {
                                 /* Remount failed, but try unmounting anyway,
                                  * unless this is a mount point we want to skip. */
                                 if (nonunmountable_path(m->path)) {
@@ -540,7 +540,7 @@ static int mount_points_list_umount(MountPoint **head, bool *changed) {
                         continue;
 
                 /* Trying to umount */
-                if (umount_with_timeout(m) < 0)
+                if (umount_with_timeout(m, umount_log_level) < 0)
                         n_failed++;
                 else
                         *changed = true;
@@ -570,7 +570,7 @@ static int swap_points_list_off(MountPoint **head, bool *changed) {
         return n_failed;
 }
 
-static int loopback_points_list_detach(MountPoint **head, bool *changed) {
+static int loopback_points_list_detach(MountPoint **head, bool *changed, int umount_log_level) {
         MountPoint *m, *n;
         int n_failed = 0, k;
         struct stat root_st;
@@ -600,7 +600,7 @@ static int loopback_points_list_detach(MountPoint **head, bool *changed) {
 
                         mount_point_free(head, m);
                 } else {
-                        log_warning_errno(errno, "Could not detach loopback %s: %m", m->path);
+                        log_full_errno(umount_log_level, errno, "Could not detach loopback %s: %m", m->path);
                         n_failed++;
                 }
         }
@@ -608,7 +608,7 @@ static int loopback_points_list_detach(MountPoint **head, bool *changed) {
         return n_failed;
 }
 
-static int dm_points_list_detach(MountPoint **head, bool *changed) {
+static int dm_points_list_detach(MountPoint **head, bool *changed, int umount_log_level) {
         MountPoint *m, *n;
         int n_failed = 0, r;
         dev_t rootdev;
@@ -633,7 +633,7 @@ static int dm_points_list_detach(MountPoint **head, bool *changed) {
                         *changed = true;
                         mount_point_free(head, m);
                 } else {
-                        log_warning_errno(errno, "Could not detach DM %s: %m", m->path);
+                        log_full_errno(umount_log_level, errno, "Could not detach DM %s: %m", m->path);
                         n_failed++;
                 }
         }
@@ -641,7 +641,7 @@ static int dm_points_list_detach(MountPoint **head, bool *changed) {
         return n_failed;
 }
 
-static int umount_all_once(bool *changed) {
+static int umount_all_once(bool *changed, int umount_log_level) {
         int r;
         LIST_HEAD(MountPoint, mp_list_head);
 
@@ -652,7 +652,7 @@ static int umount_all_once(bool *changed) {
         if (r < 0)
                 goto end;
 
-        r = mount_points_list_umount(&mp_list_head, changed);
+        r = mount_points_list_umount(&mp_list_head, changed, umount_log_level);
 
   end:
         mount_points_list_free(&mp_list_head);
@@ -660,7 +660,7 @@ static int umount_all_once(bool *changed) {
         return r;
 }
 
-int umount_all(bool *changed) {
+int umount_all(bool *changed, int umount_log_level) {
         bool umount_changed;
         int r;
 
@@ -672,7 +672,7 @@ int umount_all(bool *changed) {
         do {
                 umount_changed = false;
 
-                r = umount_all_once(&umount_changed);
+                r = umount_all_once(&umount_changed, umount_log_level);
                 if (umount_changed)
                         *changed = true;
         } while (umount_changed);
@@ -700,7 +700,7 @@ int swapoff_all(bool *changed) {
         return r;
 }
 
-int loopback_detach_all(bool *changed) {
+int loopback_detach_all(bool *changed, int umount_log_level) {
         int r;
         LIST_HEAD(MountPoint, loopback_list_head);
 
@@ -712,7 +712,7 @@ int loopback_detach_all(bool *changed) {
         if (r < 0)
                 goto end;
 
-        r = loopback_points_list_detach(&loopback_list_head, changed);
+        r = loopback_points_list_detach(&loopback_list_head, changed, umount_log_level);
 
   end:
         mount_points_list_free(&loopback_list_head);
@@ -720,7 +720,7 @@ int loopback_detach_all(bool *changed) {
         return r;
 }
 
-int dm_detach_all(bool *changed) {
+int dm_detach_all(bool *changed, int umount_log_level) {
         int r;
         LIST_HEAD(MountPoint, dm_list_head);
 
@@ -732,7 +732,7 @@ int dm_detach_all(bool *changed) {
         if (r < 0)
                 goto end;
 
-        r = dm_points_list_detach(&dm_list_head, changed);
+        r = dm_points_list_detach(&dm_list_head, changed, umount_log_level);
 
   end:
         mount_points_list_free(&dm_list_head);
diff --git a/src/core/umount.h b/src/core/umount.h
index 7c029c3..a6613e6 100644
--- a/src/core/umount.h
+++ b/src/core/umount.h
@@ -20,10 +20,10 @@
   along with systemd; If not, see <http://www.gnu.org/licenses/>.
 ***/
 
-int umount_all(bool *changed);
+int umount_all(bool *changed, int umount_log_level);
 
 int swapoff_all(bool *changed);
 
-int loopback_detach_all(bool *changed);
+int loopback_detach_all(bool *changed, int umount_log_level);
 
-int dm_detach_all(bool *changed);
+int dm_detach_all(bool *changed, int umount_log_level);
-- 
2.7.4

